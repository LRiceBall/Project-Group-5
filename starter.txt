%matplotlib inline

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

file1 = "Resources/Hot 100 Audio Features.csv"
file2 = "Resources/Hot Stuff.csv"

audio_features = pd.read_csv(file1)
hot100 = pd.read_csv(file2)

merge_df = pd.merge(audio_features, hot100, on=["Song", "Performer", "SongID"], how="outer")
merge_df.head()

# merge csv by columns
merge_df.columns

# select desired columns
reduced_df = merge_df[['Performer', 'Song', 'spotify_genre', 'spotify_track_duration_ms',
                       'spotify_track_popularity', 'danceability', 'energy', 'loudness', 'valence', 
                       'tempo', 'WeekID', 'Week Position', 'Previous Week Position', 'Peak Position',
                       'Weeks on Chart']]
reduced_df

reduced_df= reduced_df.rename(columns={'spotify_genre': 'Genre', 'energy': 'Energy',
                                       'loudness': 'Loudness'})



# reduce columns for energy and loudness
attributes_df = reduced_df[['Performer', 'Song', 'Genre', 'Energy', 'Loudness', 
                       'WeekID', 'Week Position', 'Previous Week Position', 'Peak Position',
                       'Weeks on Chart']]
attributes_df

# number of times a song is in the top 100
attributes_df["Song"].value_counts()

# select only songs in top 40
top40 = attributes_df.loc[attributes_df['Week Position'] <= 40, :]
top40.dropna(subset=['Energy', 'Loudness', 'Weeks on Chart'])
top40

# each time a song is listed as being in the top 100 the "weeks on chart" is the moist CURRENT number
    # there for all different
# get the highest amount of weeks a song has been in the top 40.
top40_song = top40.groupby(['Performer','Song'], as_index=False)

max_weeks = top40_song['Weeks on Chart'].max()
max_weeks

# sort by frequency on top 40
ranking_songs = max_weeks.sort_values("Weeks on Chart", ascending=False)
ranking_songs

# reduce columns to focus on loudness
loudness_df = top40[['Performer', 'Song', 'Genre', 'Loudness', 'Peak Position', 'Weeks on Chart']]
loudness_df

# remove NaN values in the genre and loudness columns
loudness_df = loudness_df[loudness_df['Genre'].notna()]
loudness_df = loudness_df[loudness_df['Loudness'].notna()]
loudness_df

# get the max loudness value
loudness_df['Loudness'].max()

# get the min loudness value
loudness_df['Loudness'].min()

# create a new column in bins based on loudness
loud_bins = [-30, -25, -20, -15, -10, -5, 0]
loud_labels = ['-30 to -26', '-25 to -21', '-20 to -16', '-15 to -11', '-10 to -6', '-5 to 0']

loudness_df["Loudness Category"] = pd.cut(loudness_df["Loudness"], loud_bins, 
                                          labels=loud_labels, right=False)
loudness_df

loudness_df.plot.scatter(x='Weeks on Chart', y='Loudness', grid=True, figsize=(20,8),
                        title= 'Loudness vs Weeks in Top 40')
plt.show

loudness_df.plot.scatter(x='Peak Position', y='Loudness', grid=True, figsize=(20,8),
                        title= 'Loudness vs Weeks in Top 40')
plt.show

# group data by song & disple with loud category
loud_ranking_song = loudness_df.groupby(['Song', "Loudness Category"], as_index=False)
loud_ranking_max = loud_ranking_song['Weeks on Chart'].max()
loud_ranking_max = loud_ranking_max.dropna(subset=['Weeks on Chart'])
loud_ranking_max

# take the max weeks a song is on the top 40 and show the highest rankers
loud_ranking = loud_ranking_max.sort_values("Weeks on Chart", ascending=False).dropna(subset=['Weeks on Chart'])
loud_ranking

#loud_barchart = loud_ranking.plot(kind='bar')
#loud_barchart.set_xlabel('Loudness Category')
#loud_barchart.set_ylabel('Weeks on Chart')
#plt.show()

loud_groups = loud_ranking.groupby('Loudness Category')
loud_category = loud_groups['Weeks on Chart'].mean()

loud_cat_chart = loud_category.plot.bar(title ='Loudness on Charts')
loud_cat_chart.set_xlabel('Loudness Category')
loud_cat_chart.set_ylabel('Avg Weeks on Charts')
plt.show

loud_ranking_song2 = loudness_df.groupby(['Song', "Loudness Category"], as_index=False)
loud_ranking_max2 = loud_ranking_song2['Peak Position'].max()
loud_ranking_max2 = loud_ranking_max2.dropna(subset=['Peak Position'])
loud_ranking_max2

loud_ranking2 = loud_ranking_max2.sort_values("Peak Position", ascending=True).dropna(subset=['Peak Position'])
loud_ranking2

#loud_barchart2 = loud_ranking.plot(kind='bar')
#loud_barchart2.set_xlabel('Loudness Category')
#loud_barchart2.set_ylabel('Peak Position')
#plt.show()

loud_groups2 = loud_ranking2.groupby('Loudness Category')
loud_category2 = loud_groups2['Peak Position'].mean()

loud_cat_chart2 = loud_category2.plot.bar(title ='Loudness on Charts')
loud_cat_chart2.set_xlabel('Loudness Category')
loud_cat_chart2.set_ylabel('Avg Peak Postion')
plt.show

# reduce columns to focus on energy
energy_df = top40[['Performer', 'Song', 'Genre', 'Energy', 'Peak Position', 'Weeks on Chart']]
energy_df

# remove NaN values in genre and energy columns
energy_df = energy_df[energy_df['Genre'].notna()]
energy_df = energy_df[energy_df['Energy'].notna()]
energy_df

# get the max loudness value
energy_df['Energy'].max()

# get the min loudness value
energy_df['Energy'].min()

# create a new column in bins based on loudness
energy_bins = [0, .2, .4, .6, .8, 1]
energy_labels = ['0.0 to 0.2', '0.21 to 0.4', '0.41 to 0.6', '0.61 to 0.8', '0.81 to 1']

energy_df["Energy Category"] = pd.cut(energy_df["Energy"], energy_bins, 
                                          labels=energy_labels, right=False)
energy_df

energy_df.plot.scatter(x='Weeks on Chart', y='Energy', grid=True, figsize=(20,8),
                        title= 'Energy vs Weeks in Top 40')
plt.show

energy_df.plot.scatter(x='Peak Position', y='Energy', grid=True, figsize=(20,8),
                        title= 'Loudness vs Weeks in Top 40')
plt.show

energy_ranking_song = energy_df.groupby(['Song', "Energy Category"], as_index=False)
energy_ranking_max = energy_ranking_song['Weeks on Chart'].max()
energy_ranking_max = energy_ranking_max.dropna(subset=['Weeks on Chart'])
energy_ranking_max

# take the max weeks a song is on the top 40 and show the highest rankers
energy_ranking = energy_ranking_max.sort_values("Weeks on Chart", ascending=False).dropna(subset=['Weeks on Chart'])
energy_ranking

#energy_barchart = energy_ranking.plot(kind='bar')
#energy_barchart.set_xlabel('Energy Category')
#energy_barchart.set_ylabel('Weeks on Chart')
#plt.show()

energy_groups = energy_ranking.groupby('Energy Category')
energy_category = energy_groups['Weeks on Chart'].mean()

energy_cat_chart = energy_category.plot.bar(title ='Energy on Charts')
energy_cat_chart.set_xlabel('Energy Category')
energy_cat_chart.set_ylabel('Avg Weeks on Charts')
plt.show

energy_ranking_song2 = energy_df.groupby(['Song', "Energy Category"], as_index=False)
energy_ranking_max2 = energy_ranking_song2['Peak Position'].max()
energy_ranking_max2 = energy_ranking_max2.dropna(subset=['Peak Position'])
energy_ranking_max2

# take the max weeks a song is on the top 40 and show the highest rankers
energy_ranking2 = energy_ranking_max2.sort_values("Peak Position", ascending=True).dropna(subset=['Peak Position'])
energy_ranking2

#energy_barchart2 = energy_ranking2.plot(kind='bar')
#energy_barchart2.set_xlabel('Energy Category')
#energy_barchart2.set_ylabel('Weeks on Chart')
#plt.show()

energy_groups2 = energy_ranking2.groupby('Energy Category')
energy_category2 = energy_groups2['Peak Position'].mean()

energy_cat_chart2 = energy_category2.plot.bar(title ='Energy on Charts')
energy_cat_chart2.set_xlabel('Energy Category')
energy_cat_chart2.set_ylabel('Avg Peak Position')
plt.show

merged_df = pd.merge(loudness_df, energy_df, on=["Performer", "Song", "Genre", "Peak Position",
                                                "Weeks on Chart"], how='outer').dropna()
merged_df = merged_df[["Performer", "Song", "Genre", "Loudness", "Loudness Category",
                       "Energy", "Energy Category", "Peak Position", "Weeks on Chart"]]

merged_df                                 

plt.scatter(merged_df['Loudness'],merged_df['Energy'],c=merged_df['Peak Position'])
clb = plt.colorbar()
plt.xlabel("Loudness")
plt.ylabel("Energy")
clb.set_label("Peak Position")
plt.show()

plt.scatter(merged_df['Loudness'],merged_df['Energy'],c=merged_df['Weeks on Chart'])
clb = plt.colorbar()
plt.xlabel("Loudness")
plt.ylabel("Energy")
clb.set_label("Weeks on Chart")
plt.show()

